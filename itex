#!/usr/bin/expect
proc reallyInstall { name } {
	global tlmgri targs
	
	if { $targs == "" } {
		spawn $tlmgri $name
	} else {
		spawn $tlmgri $targs $name
	}
	interact
	lassign [wait] pid spawnid os_error_flag value
	if {$value != 0} {
		send_user "
Installing $name with tlmgri has failed. This happens if the file is not in
a package or tlmgri fails for some other reason. You can try running the
command manually: tlmgri $name. Aborting...
"
		exit 1
	}
}

proc tryInstallPackage { name } {
	global cmd argv latexpid spawn_id

	set spawn_id $latexpid
	close

	send_user "\nTrying to install missing package\n"
	reallyInstall "$name"

	runCmd
}

proc runCmd { } {
	global cmd argv latexpid spawn_id
	spawn $cmd {*}$argv
	set latexpid $spawn_id

	expect {
		# epstopdf is missing
		  -re "File ..*-eps-converted-to.pdf. not found" {
			tryInstallPackage "epstopdf"
		# include,input,sty file missing
		} -re "File .(.*). not found" {
			tryInstallPackage $expect_out(1,string)
		# Bibtex ldf file is missing
		} -re "language definition file (.*) was not foun" {
			tryInstallPackage $expect_out(1,string)
		# Font encoding file is missing
		} -re "Encoding file .(.*). not found" {
			tryInstallPackage $expect_out(1,string)
		# Glossaries language module (not working yet...)
		} -re "`(glossaries-.*)' or similar" {
			tryInstallPackage $expect_out(1,string)
		# Font building
		} -re "failed to make (.*\.tfm)" {
			tryInstallPackage $expect_out(1,string)
		# Missing fonts for acmart
		} -re "Package `(.*)' not installed, or version too old?" {
			tryInstallPackage $expect_out(1,string)
		# Missing package for acmart
		} -re "Class acmart Warning: You do not have the (.*) package installed." {
			tryInstallPackage $expect_out(1,string)
		# Missing binaries for building packages
		} -re "mktexpk: (.*): not found" {
			tryInstallPackage $expect_out(1,string)
		# Pdflatex missing encoding file
		} -re ".*pdflatex \(file (.*)\): cannot open encoding file for reading" {
			tryInstallPackage $expect_out(1,string)
		# Bibtex: missing style
		} -re "I couldn't open style file (.*)" {
			tryInstallPackage $expect_out(1,string)
		# Package using \input to include .sty files
		} -re "! I can't find file `(.*)'." {
			tryInstallPackage $expect_out(1,string)
		# Tikz package missing
		} -re "! Package tikz Error: I did not find the tikz library '(.*)'" {
			tryInstallPackage "(tikz|pgf)library$expect_out(1,string).code.tex"
		# Timeout
		} timeout {
			send_user "Compilation timed out???"
			exit 1
		}
	}
	lassign [wait] pid spawnid os_error_flag value
	exit $value
}

proc help { } {
	global argv0
	send_user "Usage: $argv0 \[OPTIONS\] TEXLIVECOMMAND\n"
	send_user "\n"
	send_user "The arguments from the first positional are used as the texlive command\n"
	send_user "Available options:\n"
	send_user " -h/--help Show this help\n"
	send_user " -t PATH   Location of the tlmgri binary if not in path\n"
	send_user " -b        Query before trying to install TEXLIVECOMMAND\n"
	exit 0
}

# Default options
set tlmgri "tlmgri"
set targs ""
set autobinary 0

# Parse command line arguments
if {$argc == 0} {
	help
}

set i 0
while { $i < $argc } {
	switch [lindex $argv $i] {
		"-h" {
			help
		}
		"--help" {
			help
		}
		"-t" {
			incr i
			if {$i >= $argc} {
				send_user "-t requires an argument\n"
				exit 1
			} else {
				set tlmgri [lindex $argv $i]
			}
		}
		"-a" {
			incr i
			if {$i >= $argc} {
				send_user "-a requires an argument\n"
				exit 1
			}
			set targs [lindex $argv $i]
		}
		"-b" {
			set autobinary 1
		}
		default {
			break
		}
	}
	incr i
}

set cmd [lindex $argv $i]
if {$cmd == "" } {
	send_user "Need at least one positional argument\n"
	exit 1
}
incr i
set argv [lrange $argv $i end]

# Check commands existence
spawn "which" $cmd
lassign [wait] pid spawnid os_error_flag value

if {$value != 0} {
	send_user "Command $cmd not found. Do you want to try to install it? Y/N\n"
	if { $autobinary == 1 } {
		expect_user {
			-re "\[yY\]" { }
			-re "\[nN\]" { send_user "Okay... Bye\n"; exit 1 }
		}
	}
	send_user "Installing binaries is tricky, texlive offers them in different"
	send_user " packages for each architecture so you are posed with a big "
	send_user "list of options. However, in most cases you can choose the one "
	send_user "with no architecture suffix.\n"
	reallyInstall "$cmd"
}

# Initialize the pid to kill later
set latexpid 0

runCmd
